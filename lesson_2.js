/*1. Дан код:
var a = 1, b = 1, c, d;
c = ++a; alert(c);       // 2 Префиксная форма инкремента ++a увеличивает a и возвращает новое значение 2. 
d = b++; alert(d);       // 1 Постфиксная форма b++ также увеличивает b, но возвращает старое значение 1. 
c = (2+ ++a); alert(c);  // 5 В строке 3 мы увеличили значение а на 1 => здесь значение увеличилось еще на 1 и стало равно 3, а 2 + 3 = 5
d = (2+ b++); alert(d);  // 4 В строке 4 мы увеличили значение b на 1, хоть и показывался старый результат, здесь переменныя уже равна 2, 
                            и, хоть мы и увеличиваем резульат еще на 1, постфиксная форма инкремента b++ возвращает старое значение, то есть 2, а 2 + 2 = 4
alert(a);                // 3 В строках 3 и 5 мы дважды увеличили значение переменной на 1 => а стало равным 3
alert(b);                // 3 В строках 4 и 6 мы дважды увеличили значение переменной на 1 => b стало равным 3
Почему код даёт именно такие результаты?*/

/* 2. Чему будет равен x в примере ниже?
var a = 2;
var x = 1 + (a *= 2); 
x = 5*/

/*3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. 
Затем написать скрипт, который работает по следующему принципу:
если a и b положительные, вывести их разность;
если а и b отрицательные, вывести их произведение;
если а и b разных знаков, вывести их сумму; 
ноль можно считать положительным числом.*/

var a = prompt("Введите первое число: ");
a = Number(a);
var b = prompt("Введите второе число: ");
b = Number(b);

if (a >= 0 && b >= 0) {
  var diff = a - b;
  alert("Разность введенных чисел: " + diff);
} else if (a < 0 && b < 0) {
  var pr = a * b;
  alert("Произведение введенных чисел: " + pr);
} else {
  var summ = a + b;
  alert("Сумма введенных чисел: " + summ);
}

//### 4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15. 

var a = +prompt("Введите число от 1 до 15: ");
switch(a){
   case 1:
        alert("1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15");
        break;
    case 2:
        alert("2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15");
        break;
    case 3:
        alert("3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15");
        break;
    case 4:
        alert("4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15");
        break;
    case 5:
        alert("5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15");
        break;
    case 6:
        alert("6, 7, 8, 9, 10, 11, 12, 13, 14, 15");
        break;
    case 7:
        alert("7, 8, 9, 10, 11, 12, 13, 14, 15");
        break;
    case 8:
        alert("8, 9, 10, 11, 12, 13, 14, 15");
        break;
    case 9:
        alert("9, 10, 11, 12, 13, 14, 15");
        break;
    case 10:
        alert("10, 11, 12, 13, 14, 15");
        break;
    case 11:
        alert("11, 12, 13, 14, 15");
        break;
    case 12:
        alert("12, 13, 14, 15");
        break;
    case 13:
        alert("13, 14, 15");
        break;
    case 14:
        alert("14, 15");
        break;
    case 15:
        alert("15");
        break;
   default:
        alert("Число не входит в указанный промежуток");
}

//### 5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return. 

function summ (x, y) {
  var z = x + y;
  return z;
}

function diff (x, y) {
  var z = x - y;
  return z;
}

function pr (x, y) {
  var z = x * y;
  return z;
}

function quo (x, y) {
  var z = x / y;
  return z;
}

alert(summ(5, 3));
alert(diff(30, 5));
alert(pr(20, 3));
alert(quo(5, 2));

/*### 6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 – значения аргументов, 
operation – строка с названием операции. В зависимости от переданного значения операции выполнить одну из арифметических операций 
(использовать функции из пункта 3) и вернуть полученное значение (использовать switch). */

function mathOperation(arg1, arg2, operation) {
  switch (operation){
   case '+':
  	var summ = arg1 + arg2;
   	return summ;
   case '-':
  	var diff = arg1 - arg2;
   	return diff;
   case '*':
  	var pr = arg1 * arg2;
   	return pr;
   case '/':
  	var quo = arg1 / arg2;
   	return quo;
   default:
    return "Operation is not defined"
	}
}

alert(mathOperation(5, 2, "+"));
alert(mathOperation(10, 2, "-"));
alert(mathOperation(8, 3, "*"));
alert(mathOperation(6, 4, "/"));
alert(mathOperation(5, 2, "&"));

//### 7. *Сравнить null и 0. Попробуйте объяснить результат.

alert( null > 0 );  // (1) false
alert( null == 0 ); // (2) false
alert( null >= 0 ); // (3) true

/*С точки зрения математики это странно. 
Результат последнего сравнения говорит о том, что "null больше или равно нулю", 
тогда результат одного из сравнений выше должен быть true, но они оба ложны.
Причина в том, что нестрогое равенство и сравнения > < >= <= работают по-разному. 
Сравнения преобразуют null в число, рассматривая его как 0. Поэтому выражение (3) null >= 0 истинно, а null > 0 ложно.
С другой стороны, для нестрогого равенства == значений undefined и null действует особое правило: эти значения ни к чему не приводятся, 
они равны друг другу и не равны ничему другому. Поэтому (2) null == 0 ложно.*/

//### 8. *С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow), где val – заданное число, pow – степень.

function power(val, pow) {
  if (pow == 1) {
    return val;
  } else {
    return val * power(val, pow - 1);
  }
}

alert(power(2,3));